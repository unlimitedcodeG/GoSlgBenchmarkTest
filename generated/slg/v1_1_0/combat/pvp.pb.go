// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: v1.1.0/combat/pvp.proto

package combat

import (
	common "GoSlgBenchmarkTest/generated/slg/v1_1_0/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 枚举定义
type PvpMode int32

const (
	PvpMode_PVP_MODE_UNKNOWN    PvpMode = 0
	PvpMode_PVP_MODE_RANKED_1V1 PvpMode = 1 // 排位1v1
	PvpMode_PVP_MODE_RANKED_3V3 PvpMode = 2 // 排位3v3
	PvpMode_PVP_MODE_CASUAL_1V1 PvpMode = 3 // 休闲1v1
	PvpMode_PVP_MODE_CASUAL_3V3 PvpMode = 4 // 休闲3v3
	PvpMode_PVP_MODE_TOURNAMENT PvpMode = 5 // 锦标�?
	PvpMode_PVP_MODE_GUILD_WAR  PvpMode = 6 // 公会�?
)

// Enum value maps for PvpMode.
var (
	PvpMode_name = map[int32]string{
		0: "PVP_MODE_UNKNOWN",
		1: "PVP_MODE_RANKED_1V1",
		2: "PVP_MODE_RANKED_3V3",
		3: "PVP_MODE_CASUAL_1V1",
		4: "PVP_MODE_CASUAL_3V3",
		5: "PVP_MODE_TOURNAMENT",
		6: "PVP_MODE_GUILD_WAR",
	}
	PvpMode_value = map[string]int32{
		"PVP_MODE_UNKNOWN":    0,
		"PVP_MODE_RANKED_1V1": 1,
		"PVP_MODE_RANKED_3V3": 2,
		"PVP_MODE_CASUAL_1V1": 3,
		"PVP_MODE_CASUAL_3V3": 4,
		"PVP_MODE_TOURNAMENT": 5,
		"PVP_MODE_GUILD_WAR":  6,
	}
)

func (x PvpMode) Enum() *PvpMode {
	p := new(PvpMode)
	*p = x
	return p
}

func (x PvpMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PvpMode) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_1_0_combat_pvp_proto_enumTypes[0].Descriptor()
}

func (PvpMode) Type() protoreflect.EnumType {
	return &file_v1_1_0_combat_pvp_proto_enumTypes[0]
}

func (x PvpMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PvpMode.Descriptor instead.
func (PvpMode) EnumDescriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{0}
}

type PvpMatchResult int32

const (
	PvpMatchResult_PVP_MATCH_RESULT_UNKNOWN   PvpMatchResult = 0
	PvpMatchResult_PVP_MATCH_RESULT_SUCCESS   PvpMatchResult = 1 // 匹配成功
	PvpMatchResult_PVP_MATCH_RESULT_TIMEOUT   PvpMatchResult = 2 // 匹配超时
	PvpMatchResult_PVP_MATCH_RESULT_CANCELLED PvpMatchResult = 3 // 匹配取消
	PvpMatchResult_PVP_MATCH_RESULT_ERROR     PvpMatchResult = 4 // 匹配错误
)

// Enum value maps for PvpMatchResult.
var (
	PvpMatchResult_name = map[int32]string{
		0: "PVP_MATCH_RESULT_UNKNOWN",
		1: "PVP_MATCH_RESULT_SUCCESS",
		2: "PVP_MATCH_RESULT_TIMEOUT",
		3: "PVP_MATCH_RESULT_CANCELLED",
		4: "PVP_MATCH_RESULT_ERROR",
	}
	PvpMatchResult_value = map[string]int32{
		"PVP_MATCH_RESULT_UNKNOWN":   0,
		"PVP_MATCH_RESULT_SUCCESS":   1,
		"PVP_MATCH_RESULT_TIMEOUT":   2,
		"PVP_MATCH_RESULT_CANCELLED": 3,
		"PVP_MATCH_RESULT_ERROR":     4,
	}
)

func (x PvpMatchResult) Enum() *PvpMatchResult {
	p := new(PvpMatchResult)
	*p = x
	return p
}

func (x PvpMatchResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PvpMatchResult) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_1_0_combat_pvp_proto_enumTypes[1].Descriptor()
}

func (PvpMatchResult) Type() protoreflect.EnumType {
	return &file_v1_1_0_combat_pvp_proto_enumTypes[1]
}

func (x PvpMatchResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PvpMatchResult.Descriptor instead.
func (PvpMatchResult) EnumDescriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{1}
}

type PvpEndReason int32

const (
	PvpEndReason_PVP_END_REASON_UNKNOWN    PvpEndReason = 0
	PvpEndReason_PVP_END_REASON_VICTORY    PvpEndReason = 1 // 正常胜利
	PvpEndReason_PVP_END_REASON_SURRENDER  PvpEndReason = 2 // 投降
	PvpEndReason_PVP_END_REASON_TIMEOUT    PvpEndReason = 3 // 超时
	PvpEndReason_PVP_END_REASON_DISCONNECT PvpEndReason = 4 // 断线
	PvpEndReason_PVP_END_REASON_CHEAT      PvpEndReason = 5 // 作弊
)

// Enum value maps for PvpEndReason.
var (
	PvpEndReason_name = map[int32]string{
		0: "PVP_END_REASON_UNKNOWN",
		1: "PVP_END_REASON_VICTORY",
		2: "PVP_END_REASON_SURRENDER",
		3: "PVP_END_REASON_TIMEOUT",
		4: "PVP_END_REASON_DISCONNECT",
		5: "PVP_END_REASON_CHEAT",
	}
	PvpEndReason_value = map[string]int32{
		"PVP_END_REASON_UNKNOWN":    0,
		"PVP_END_REASON_VICTORY":    1,
		"PVP_END_REASON_SURRENDER":  2,
		"PVP_END_REASON_TIMEOUT":    3,
		"PVP_END_REASON_DISCONNECT": 4,
		"PVP_END_REASON_CHEAT":      5,
	}
)

func (x PvpEndReason) Enum() *PvpEndReason {
	p := new(PvpEndReason)
	*p = x
	return p
}

func (x PvpEndReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PvpEndReason) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_1_0_combat_pvp_proto_enumTypes[2].Descriptor()
}

func (PvpEndReason) Type() protoreflect.EnumType {
	return &file_v1_1_0_combat_pvp_proto_enumTypes[2]
}

func (x PvpEndReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PvpEndReason.Descriptor instead.
func (PvpEndReason) EnumDescriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{2}
}

type PvpTier int32

const (
	PvpTier_PVP_TIER_UNKNOWN     PvpTier = 0
	PvpTier_PVP_TIER_BRONZE      PvpTier = 1 // 青铜
	PvpTier_PVP_TIER_SILVER      PvpTier = 2 // 白银
	PvpTier_PVP_TIER_GOLD        PvpTier = 3 // 黄金
	PvpTier_PVP_TIER_PLATINUM    PvpTier = 4 // 铂金
	PvpTier_PVP_TIER_DIAMOND     PvpTier = 5 // 钻石
	PvpTier_PVP_TIER_MASTER      PvpTier = 6 // 大师
	PvpTier_PVP_TIER_GRANDMASTER PvpTier = 7 // 宗师
)

// Enum value maps for PvpTier.
var (
	PvpTier_name = map[int32]string{
		0: "PVP_TIER_UNKNOWN",
		1: "PVP_TIER_BRONZE",
		2: "PVP_TIER_SILVER",
		3: "PVP_TIER_GOLD",
		4: "PVP_TIER_PLATINUM",
		5: "PVP_TIER_DIAMOND",
		6: "PVP_TIER_MASTER",
		7: "PVP_TIER_GRANDMASTER",
	}
	PvpTier_value = map[string]int32{
		"PVP_TIER_UNKNOWN":     0,
		"PVP_TIER_BRONZE":      1,
		"PVP_TIER_SILVER":      2,
		"PVP_TIER_GOLD":        3,
		"PVP_TIER_PLATINUM":    4,
		"PVP_TIER_DIAMOND":     5,
		"PVP_TIER_MASTER":      6,
		"PVP_TIER_GRANDMASTER": 7,
	}
)

func (x PvpTier) Enum() *PvpTier {
	p := new(PvpTier)
	*p = x
	return p
}

func (x PvpTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PvpTier) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_1_0_combat_pvp_proto_enumTypes[3].Descriptor()
}

func (PvpTier) Type() protoreflect.EnumType {
	return &file_v1_1_0_combat_pvp_proto_enumTypes[3]
}

func (x PvpTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PvpTier.Descriptor instead.
func (PvpTier) EnumDescriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{3}
}

type PvpLeaderboardType int32

const (
	PvpLeaderboardType_PVP_LEADERBOARD_TYPE_UNKNOWN  PvpLeaderboardType = 0
	PvpLeaderboardType_PVP_LEADERBOARD_TYPE_RATING   PvpLeaderboardType = 1 // 评分排行
	PvpLeaderboardType_PVP_LEADERBOARD_TYPE_WIN_RATE PvpLeaderboardType = 2 // 胜率排行
	PvpLeaderboardType_PVP_LEADERBOARD_TYPE_STREAK   PvpLeaderboardType = 3 // 连胜排行
	PvpLeaderboardType_PVP_LEADERBOARD_TYPE_GUILD    PvpLeaderboardType = 4 // 公会排行
)

// Enum value maps for PvpLeaderboardType.
var (
	PvpLeaderboardType_name = map[int32]string{
		0: "PVP_LEADERBOARD_TYPE_UNKNOWN",
		1: "PVP_LEADERBOARD_TYPE_RATING",
		2: "PVP_LEADERBOARD_TYPE_WIN_RATE",
		3: "PVP_LEADERBOARD_TYPE_STREAK",
		4: "PVP_LEADERBOARD_TYPE_GUILD",
	}
	PvpLeaderboardType_value = map[string]int32{
		"PVP_LEADERBOARD_TYPE_UNKNOWN":  0,
		"PVP_LEADERBOARD_TYPE_RATING":   1,
		"PVP_LEADERBOARD_TYPE_WIN_RATE": 2,
		"PVP_LEADERBOARD_TYPE_STREAK":   3,
		"PVP_LEADERBOARD_TYPE_GUILD":    4,
	}
)

func (x PvpLeaderboardType) Enum() *PvpLeaderboardType {
	p := new(PvpLeaderboardType)
	*p = x
	return p
}

func (x PvpLeaderboardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PvpLeaderboardType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_1_0_combat_pvp_proto_enumTypes[4].Descriptor()
}

func (PvpLeaderboardType) Type() protoreflect.EnumType {
	return &file_v1_1_0_combat_pvp_proto_enumTypes[4]
}

func (x PvpLeaderboardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PvpLeaderboardType.Descriptor instead.
func (PvpLeaderboardType) EnumDescriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{4}
}

type PvpSeasonStatus int32

const (
	PvpSeasonStatus_PVP_SEASON_STATUS_UNKNOWN  PvpSeasonStatus = 0
	PvpSeasonStatus_PVP_SEASON_STATUS_UPCOMING PvpSeasonStatus = 1 // 即将开�?
	PvpSeasonStatus_PVP_SEASON_STATUS_ACTIVE   PvpSeasonStatus = 2 // 进行�?
	PvpSeasonStatus_PVP_SEASON_STATUS_ENDING   PvpSeasonStatus = 3 // 即将结束
	PvpSeasonStatus_PVP_SEASON_STATUS_ENDED    PvpSeasonStatus = 4 // 已结�?
)

// Enum value maps for PvpSeasonStatus.
var (
	PvpSeasonStatus_name = map[int32]string{
		0: "PVP_SEASON_STATUS_UNKNOWN",
		1: "PVP_SEASON_STATUS_UPCOMING",
		2: "PVP_SEASON_STATUS_ACTIVE",
		3: "PVP_SEASON_STATUS_ENDING",
		4: "PVP_SEASON_STATUS_ENDED",
	}
	PvpSeasonStatus_value = map[string]int32{
		"PVP_SEASON_STATUS_UNKNOWN":  0,
		"PVP_SEASON_STATUS_UPCOMING": 1,
		"PVP_SEASON_STATUS_ACTIVE":   2,
		"PVP_SEASON_STATUS_ENDING":   3,
		"PVP_SEASON_STATUS_ENDED":    4,
	}
)

func (x PvpSeasonStatus) Enum() *PvpSeasonStatus {
	p := new(PvpSeasonStatus)
	*p = x
	return p
}

func (x PvpSeasonStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PvpSeasonStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_1_0_combat_pvp_proto_enumTypes[5].Descriptor()
}

func (PvpSeasonStatus) Type() protoreflect.EnumType {
	return &file_v1_1_0_combat_pvp_proto_enumTypes[5]
}

func (x PvpSeasonStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PvpSeasonStatus.Descriptor instead.
func (PvpSeasonStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{5}
}

// PVP匹配请求
type PvpMatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                // 玩家ID
	Mode          PvpMode                `protobuf:"varint,2,opt,name=mode,proto3,enum=slg.combat.v1_1_0.PvpMode" json:"mode,omitempty"`        // PVP模式
	RatingRange   int32                  `protobuf:"varint,3,opt,name=rating_range,json=ratingRange,proto3" json:"rating_range,omitempty"`      // 评分范围
	PreferredMaps []string               `protobuf:"bytes,4,rep,name=preferred_maps,json=preferredMaps,proto3" json:"preferred_maps,omitempty"` // 偏好地图
	TeamId        string                 `protobuf:"bytes,5,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                      // 队伍ID(团队模式)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PvpMatchRequest) Reset() {
	*x = PvpMatchRequest{}
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvpMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpMatchRequest) ProtoMessage() {}

func (x *PvpMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpMatchRequest.ProtoReflect.Descriptor instead.
func (*PvpMatchRequest) Descriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{0}
}

func (x *PvpMatchRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PvpMatchRequest) GetMode() PvpMode {
	if x != nil {
		return x.Mode
	}
	return PvpMode_PVP_MODE_UNKNOWN
}

func (x *PvpMatchRequest) GetRatingRange() int32 {
	if x != nil {
		return x.RatingRange
	}
	return 0
}

func (x *PvpMatchRequest) GetPreferredMaps() []string {
	if x != nil {
		return x.PreferredMaps
	}
	return nil
}

func (x *PvpMatchRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

// PVP匹配响应
type PvpMatchResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchId           string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                                  // 匹配ID
	Result            PvpMatchResult         `protobuf:"varint,2,opt,name=result,proto3,enum=slg.combat.v1_1_0.PvpMatchResult" json:"result,omitempty"`            // 匹配结果
	Players           []*PvpPlayer           `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`                                                 // 玩家列表
	MapId             string                 `protobuf:"bytes,4,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`                                        // 地图ID
	StartTime         int64                  `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                           // 开始时�?
	EstimatedWaitTime int32                  `protobuf:"varint,6,opt,name=estimated_wait_time,json=estimatedWaitTime,proto3" json:"estimated_wait_time,omitempty"` // 预估等待时间(�?
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PvpMatchResponse) Reset() {
	*x = PvpMatchResponse{}
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvpMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpMatchResponse) ProtoMessage() {}

func (x *PvpMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpMatchResponse.ProtoReflect.Descriptor instead.
func (*PvpMatchResponse) Descriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{1}
}

func (x *PvpMatchResponse) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *PvpMatchResponse) GetResult() PvpMatchResult {
	if x != nil {
		return x.Result
	}
	return PvpMatchResult_PVP_MATCH_RESULT_UNKNOWN
}

func (x *PvpMatchResponse) GetPlayers() []*PvpPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *PvpMatchResponse) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *PvpMatchResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PvpMatchResponse) GetEstimatedWaitTime() int32 {
	if x != nil {
		return x.EstimatedWaitTime
	}
	return 0
}

// PVP战斗结果
type PvpBattleResult struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MatchId        string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                                            // 匹配ID
	WinnerPlayerId string                 `protobuf:"bytes,2,opt,name=winner_player_id,json=winnerPlayerId,proto3" json:"winner_player_id,omitempty"`                     // 获胜玩家ID
	WinnerTeamId   string                 `protobuf:"bytes,3,opt,name=winner_team_id,json=winnerTeamId,proto3" json:"winner_team_id,omitempty"`                           // 获胜队伍ID
	PlayerResults  []*PvpPlayerResult     `protobuf:"bytes,4,rep,name=player_results,json=playerResults,proto3" json:"player_results,omitempty"`                          // 玩家结果
	BattleDuration int32                  `protobuf:"varint,5,opt,name=battle_duration,json=battleDuration,proto3" json:"battle_duration,omitempty"`                      // 战斗时长(�?
	EndReason      PvpEndReason           `protobuf:"varint,6,opt,name=end_reason,json=endReason,proto3,enum=slg.combat.v1_1_0.PvpEndReason" json:"end_reason,omitempty"` // 结束原因
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PvpBattleResult) Reset() {
	*x = PvpBattleResult{}
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvpBattleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpBattleResult) ProtoMessage() {}

func (x *PvpBattleResult) ProtoReflect() protoreflect.Message {
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpBattleResult.ProtoReflect.Descriptor instead.
func (*PvpBattleResult) Descriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{2}
}

func (x *PvpBattleResult) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *PvpBattleResult) GetWinnerPlayerId() string {
	if x != nil {
		return x.WinnerPlayerId
	}
	return ""
}

func (x *PvpBattleResult) GetWinnerTeamId() string {
	if x != nil {
		return x.WinnerTeamId
	}
	return ""
}

func (x *PvpBattleResult) GetPlayerResults() []*PvpPlayerResult {
	if x != nil {
		return x.PlayerResults
	}
	return nil
}

func (x *PvpBattleResult) GetBattleDuration() int32 {
	if x != nil {
		return x.BattleDuration
	}
	return 0
}

func (x *PvpBattleResult) GetEndReason() PvpEndReason {
	if x != nil {
		return x.EndReason
	}
	return PvpEndReason_PVP_END_REASON_UNKNOWN
}

// PVP排行榜请�?
type PvpLeaderboardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          PvpLeaderboardType     `protobuf:"varint,1,opt,name=type,proto3,enum=slg.combat.v1_1_0.PvpLeaderboardType" json:"type,omitempty"` // 排行榜类�?
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                                           // 页码
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                   // 页面大小
	SeasonId      string                 `protobuf:"bytes,4,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`                    // 赛季ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PvpLeaderboardRequest) Reset() {
	*x = PvpLeaderboardRequest{}
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvpLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpLeaderboardRequest) ProtoMessage() {}

func (x *PvpLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*PvpLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{3}
}

func (x *PvpLeaderboardRequest) GetType() PvpLeaderboardType {
	if x != nil {
		return x.Type
	}
	return PvpLeaderboardType_PVP_LEADERBOARD_TYPE_UNKNOWN
}

func (x *PvpLeaderboardRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PvpLeaderboardRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PvpLeaderboardRequest) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

// PVP排行榜响�?
type PvpLeaderboardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*PvpRankEntry        `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`                                     // 排行榜条�?
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`            // 总数�?
	PlayerRank    *PvpPlayerRank         `protobuf:"bytes,3,opt,name=player_rank,json=playerRank,proto3" json:"player_rank,omitempty"`             // 玩家自己的排�?
	SeasonId      string                 `protobuf:"bytes,4,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`                   // 当前赛季ID
	SeasonEndTime int64                  `protobuf:"varint,5,opt,name=season_end_time,json=seasonEndTime,proto3" json:"season_end_time,omitempty"` // 赛季结束时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PvpLeaderboardResponse) Reset() {
	*x = PvpLeaderboardResponse{}
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvpLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpLeaderboardResponse) ProtoMessage() {}

func (x *PvpLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*PvpLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{4}
}

func (x *PvpLeaderboardResponse) GetEntries() []*PvpRankEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *PvpLeaderboardResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *PvpLeaderboardResponse) GetPlayerRank() *PvpPlayerRank {
	if x != nil {
		return x.PlayerRank
	}
	return nil
}

func (x *PvpLeaderboardResponse) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *PvpLeaderboardResponse) GetSeasonEndTime() int64 {
	if x != nil {
		return x.SeasonEndTime
	}
	return 0
}

// PVP赛季信息
type PvpSeasonInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SeasonId      string                 `protobuf:"bytes,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`                                                                                     // 赛季ID
	SeasonName    string                 `protobuf:"bytes,2,opt,name=season_name,json=seasonName,proto3" json:"season_name,omitempty"`                                                                               // 赛季名称
	StartTime     int64                  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                                                 // 开始时�?
	EndTime       int64                  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                                                       // 结束时间
	Status        PvpSeasonStatus        `protobuf:"varint,5,opt,name=status,proto3,enum=slg.combat.v1_1_0.PvpSeasonStatus" json:"status,omitempty"`                                                                 // 赛季状�?
	SeasonRewards []*PvpReward           `protobuf:"bytes,6,rep,name=season_rewards,json=seasonRewards,proto3" json:"season_rewards,omitempty"`                                                                      // 赛季奖励
	RatingTiers   map[string]int32       `protobuf:"bytes,7,rep,name=rating_tiers,json=ratingTiers,proto3" json:"rating_tiers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 评分段位
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PvpSeasonInfo) Reset() {
	*x = PvpSeasonInfo{}
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvpSeasonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpSeasonInfo) ProtoMessage() {}

func (x *PvpSeasonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpSeasonInfo.ProtoReflect.Descriptor instead.
func (*PvpSeasonInfo) Descriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{5}
}

func (x *PvpSeasonInfo) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *PvpSeasonInfo) GetSeasonName() string {
	if x != nil {
		return x.SeasonName
	}
	return ""
}

func (x *PvpSeasonInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PvpSeasonInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PvpSeasonInfo) GetStatus() PvpSeasonStatus {
	if x != nil {
		return x.Status
	}
	return PvpSeasonStatus_PVP_SEASON_STATUS_UNKNOWN
}

func (x *PvpSeasonInfo) GetSeasonRewards() []*PvpReward {
	if x != nil {
		return x.SeasonRewards
	}
	return nil
}

func (x *PvpSeasonInfo) GetRatingTiers() map[string]int32 {
	if x != nil {
		return x.RatingTiers
	}
	return nil
}

// PVP玩家信息
type PvpPlayer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`         // 玩家ID
	PlayerName    string                 `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`   // 玩家名称
	Rating        int32                  `protobuf:"varint,3,opt,name=rating,proto3" json:"rating,omitempty"`                            // 评分
	Tier          PvpTier                `protobuf:"varint,4,opt,name=tier,proto3,enum=slg.combat.v1_1_0.PvpTier" json:"tier,omitempty"` // 段位
	WinCount      int32                  `protobuf:"varint,5,opt,name=win_count,json=winCount,proto3" json:"win_count,omitempty"`        // 胜场�?
	LoseCount     int32                  `protobuf:"varint,6,opt,name=lose_count,json=loseCount,proto3" json:"lose_count,omitempty"`     // 败场�?
	AvatarId      string                 `protobuf:"bytes,7,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`         // 头像ID
	GuildName     string                 `protobuf:"bytes,8,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`      // 公会名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PvpPlayer) Reset() {
	*x = PvpPlayer{}
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvpPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpPlayer) ProtoMessage() {}

func (x *PvpPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpPlayer.ProtoReflect.Descriptor instead.
func (*PvpPlayer) Descriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{6}
}

func (x *PvpPlayer) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PvpPlayer) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *PvpPlayer) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *PvpPlayer) GetTier() PvpTier {
	if x != nil {
		return x.Tier
	}
	return PvpTier_PVP_TIER_UNKNOWN
}

func (x *PvpPlayer) GetWinCount() int32 {
	if x != nil {
		return x.WinCount
	}
	return 0
}

func (x *PvpPlayer) GetLoseCount() int32 {
	if x != nil {
		return x.LoseCount
	}
	return 0
}

func (x *PvpPlayer) GetAvatarId() string {
	if x != nil {
		return x.AvatarId
	}
	return ""
}

func (x *PvpPlayer) GetGuildName() string {
	if x != nil {
		return x.GuildName
	}
	return ""
}

// PVP玩家结果
type PvpPlayerResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                              // 玩家ID
	IsWinner      bool                   `protobuf:"varint,2,opt,name=is_winner,json=isWinner,proto3" json:"is_winner,omitempty"`                             // 是否获胜
	RatingChange  int32                  `protobuf:"varint,3,opt,name=rating_change,json=ratingChange,proto3" json:"rating_change,omitempty"`                 // 评分变化
	OldTier       PvpTier                `protobuf:"varint,4,opt,name=old_tier,json=oldTier,proto3,enum=slg.combat.v1_1_0.PvpTier" json:"old_tier,omitempty"` // 旧段�?
	NewTier       PvpTier                `protobuf:"varint,5,opt,name=new_tier,json=newTier,proto3,enum=slg.combat.v1_1_0.PvpTier" json:"new_tier,omitempty"` // 新段�?
	Reward        *PvpReward             `protobuf:"bytes,6,opt,name=reward,proto3" json:"reward,omitempty"`                                                  // 奖励
	Achievements  []*PvpAchievement      `protobuf:"bytes,7,rep,name=achievements,proto3" json:"achievements,omitempty"`                                      // 成就
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PvpPlayerResult) Reset() {
	*x = PvpPlayerResult{}
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvpPlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpPlayerResult) ProtoMessage() {}

func (x *PvpPlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpPlayerResult.ProtoReflect.Descriptor instead.
func (*PvpPlayerResult) Descriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{7}
}

func (x *PvpPlayerResult) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PvpPlayerResult) GetIsWinner() bool {
	if x != nil {
		return x.IsWinner
	}
	return false
}

func (x *PvpPlayerResult) GetRatingChange() int32 {
	if x != nil {
		return x.RatingChange
	}
	return 0
}

func (x *PvpPlayerResult) GetOldTier() PvpTier {
	if x != nil {
		return x.OldTier
	}
	return PvpTier_PVP_TIER_UNKNOWN
}

func (x *PvpPlayerResult) GetNewTier() PvpTier {
	if x != nil {
		return x.NewTier
	}
	return PvpTier_PVP_TIER_UNKNOWN
}

func (x *PvpPlayerResult) GetReward() *PvpReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *PvpPlayerResult) GetAchievements() []*PvpAchievement {
	if x != nil {
		return x.Achievements
	}
	return nil
}

// PVP排行榜条�?
type PvpRankEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rank          int32                  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`     // 排名
	Player        *PvpPlayer             `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`  // 玩家信息
	Points        int32                  `protobuf:"varint,3,opt,name=points,proto3" json:"points,omitempty"` // 积分
	Streak        int32                  `protobuf:"varint,4,opt,name=streak,proto3" json:"streak,omitempty"` // 连胜/连败�?
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PvpRankEntry) Reset() {
	*x = PvpRankEntry{}
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvpRankEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpRankEntry) ProtoMessage() {}

func (x *PvpRankEntry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpRankEntry.ProtoReflect.Descriptor instead.
func (*PvpRankEntry) Descriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{8}
}

func (x *PvpRankEntry) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *PvpRankEntry) GetPlayer() *PvpPlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *PvpRankEntry) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *PvpRankEntry) GetStreak() int32 {
	if x != nil {
		return x.Streak
	}
	return 0
}

// PVP玩家排名
type PvpPlayerRank struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrentRank   int32                  `protobuf:"varint,1,opt,name=current_rank,json=currentRank,proto3" json:"current_rank,omitempty"` // 当前排名
	BestRank      int32                  `protobuf:"varint,2,opt,name=best_rank,json=bestRank,proto3" json:"best_rank,omitempty"`          // 最佳排�?
	Rating        int32                  `protobuf:"varint,3,opt,name=rating,proto3" json:"rating,omitempty"`                              // 当前评分
	BestRating    int32                  `protobuf:"varint,4,opt,name=best_rating,json=bestRating,proto3" json:"best_rating,omitempty"`    // 历史最高评�?
	Tier          PvpTier                `protobuf:"varint,5,opt,name=tier,proto3,enum=slg.combat.v1_1_0.PvpTier" json:"tier,omitempty"`   // 当前段位
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PvpPlayerRank) Reset() {
	*x = PvpPlayerRank{}
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvpPlayerRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpPlayerRank) ProtoMessage() {}

func (x *PvpPlayerRank) ProtoReflect() protoreflect.Message {
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpPlayerRank.ProtoReflect.Descriptor instead.
func (*PvpPlayerRank) Descriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{9}
}

func (x *PvpPlayerRank) GetCurrentRank() int32 {
	if x != nil {
		return x.CurrentRank
	}
	return 0
}

func (x *PvpPlayerRank) GetBestRank() int32 {
	if x != nil {
		return x.BestRank
	}
	return 0
}

func (x *PvpPlayerRank) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *PvpPlayerRank) GetBestRating() int32 {
	if x != nil {
		return x.BestRating
	}
	return 0
}

func (x *PvpPlayerRank) GetTier() PvpTier {
	if x != nil {
		return x.Tier
	}
	return PvpTier_PVP_TIER_UNKNOWN
}

// PVP奖励
type PvpReward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HonorPoints   int32                  `protobuf:"varint,1,opt,name=honor_points,json=honorPoints,proto3" json:"honor_points,omitempty"` // 荣誉点数
	PvpCoins      int32                  `protobuf:"varint,2,opt,name=pvp_coins,json=pvpCoins,proto3" json:"pvp_coins,omitempty"`          // PVP�?
	Items         []*common.Item         `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`                                 // 物品奖励
	TitleId       string                 `protobuf:"bytes,4,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`              // 称号ID
	Experience    int32                  `protobuf:"varint,5,opt,name=experience,proto3" json:"experience,omitempty"`                      // 经验�?
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PvpReward) Reset() {
	*x = PvpReward{}
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvpReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpReward) ProtoMessage() {}

func (x *PvpReward) ProtoReflect() protoreflect.Message {
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpReward.ProtoReflect.Descriptor instead.
func (*PvpReward) Descriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{10}
}

func (x *PvpReward) GetHonorPoints() int32 {
	if x != nil {
		return x.HonorPoints
	}
	return 0
}

func (x *PvpReward) GetPvpCoins() int32 {
	if x != nil {
		return x.PvpCoins
	}
	return 0
}

func (x *PvpReward) GetItems() []*common.Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PvpReward) GetTitleId() string {
	if x != nil {
		return x.TitleId
	}
	return ""
}

func (x *PvpReward) GetExperience() int32 {
	if x != nil {
		return x.Experience
	}
	return 0
}

// PVP成就
type PvpAchievement struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AchievementId   string                 `protobuf:"bytes,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`       // 成就ID
	AchievementName string                 `protobuf:"bytes,2,opt,name=achievement_name,json=achievementName,proto3" json:"achievement_name,omitempty"` // 成就名称
	UnlockTime      int64                  `protobuf:"varint,3,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`               // 解锁时间
	Reward          *PvpReward             `protobuf:"bytes,4,opt,name=reward,proto3" json:"reward,omitempty"`                                          // 成就奖励
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PvpAchievement) Reset() {
	*x = PvpAchievement{}
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvpAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpAchievement) ProtoMessage() {}

func (x *PvpAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_v1_1_0_combat_pvp_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpAchievement.ProtoReflect.Descriptor instead.
func (*PvpAchievement) Descriptor() ([]byte, []int) {
	return file_v1_1_0_combat_pvp_proto_rawDescGZIP(), []int{11}
}

func (x *PvpAchievement) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

func (x *PvpAchievement) GetAchievementName() string {
	if x != nil {
		return x.AchievementName
	}
	return ""
}

func (x *PvpAchievement) GetUnlockTime() int64 {
	if x != nil {
		return x.UnlockTime
	}
	return 0
}

func (x *PvpAchievement) GetReward() *PvpReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

var File_v1_1_0_combat_pvp_proto protoreflect.FileDescriptor

const file_v1_1_0_combat_pvp_proto_rawDesc = "" +
	"\n" +
	"\x17v1.1.0/combat/pvp.proto\x12\x11slg.combat.v1_1_0\x1a\x19v1.1.0/common/types.proto\"\xc1\x01\n" +
	"\x0fPvpMatchRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12.\n" +
	"\x04mode\x18\x02 \x01(\x0e2\x1a.slg.combat.v1_1_0.PvpModeR\x04mode\x12!\n" +
	"\frating_range\x18\x03 \x01(\x05R\vratingRange\x12%\n" +
	"\x0epreferred_maps\x18\x04 \x03(\tR\rpreferredMaps\x12\x17\n" +
	"\ateam_id\x18\x05 \x01(\tR\x06teamId\"\x86\x02\n" +
	"\x10PvpMatchResponse\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\x129\n" +
	"\x06result\x18\x02 \x01(\x0e2!.slg.combat.v1_1_0.PvpMatchResultR\x06result\x126\n" +
	"\aplayers\x18\x03 \x03(\v2\x1c.slg.combat.v1_1_0.PvpPlayerR\aplayers\x12\x15\n" +
	"\x06map_id\x18\x04 \x01(\tR\x05mapId\x12\x1d\n" +
	"\n" +
	"start_time\x18\x05 \x01(\x03R\tstartTime\x12.\n" +
	"\x13estimated_wait_time\x18\x06 \x01(\x05R\x11estimatedWaitTime\"\xb0\x02\n" +
	"\x0fPvpBattleResult\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\x12(\n" +
	"\x10winner_player_id\x18\x02 \x01(\tR\x0ewinnerPlayerId\x12$\n" +
	"\x0ewinner_team_id\x18\x03 \x01(\tR\fwinnerTeamId\x12I\n" +
	"\x0eplayer_results\x18\x04 \x03(\v2\".slg.combat.v1_1_0.PvpPlayerResultR\rplayerResults\x12'\n" +
	"\x0fbattle_duration\x18\x05 \x01(\x05R\x0ebattleDuration\x12>\n" +
	"\n" +
	"end_reason\x18\x06 \x01(\x0e2\x1f.slg.combat.v1_1_0.PvpEndReasonR\tendReason\"\xa0\x01\n" +
	"\x15PvpLeaderboardRequest\x129\n" +
	"\x04type\x18\x01 \x01(\x0e2%.slg.combat.v1_1_0.PvpLeaderboardTypeR\x04type\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x1b\n" +
	"\tseason_id\x18\x04 \x01(\tR\bseasonId\"\xfc\x01\n" +
	"\x16PvpLeaderboardResponse\x129\n" +
	"\aentries\x18\x01 \x03(\v2\x1f.slg.combat.v1_1_0.PvpRankEntryR\aentries\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12A\n" +
	"\vplayer_rank\x18\x03 \x01(\v2 .slg.combat.v1_1_0.PvpPlayerRankR\n" +
	"playerRank\x12\x1b\n" +
	"\tseason_id\x18\x04 \x01(\tR\bseasonId\x12&\n" +
	"\x0fseason_end_time\x18\x05 \x01(\x03R\rseasonEndTime\"\x9e\x03\n" +
	"\rPvpSeasonInfo\x12\x1b\n" +
	"\tseason_id\x18\x01 \x01(\tR\bseasonId\x12\x1f\n" +
	"\vseason_name\x18\x02 \x01(\tR\n" +
	"seasonName\x12\x1d\n" +
	"\n" +
	"start_time\x18\x03 \x01(\x03R\tstartTime\x12\x19\n" +
	"\bend_time\x18\x04 \x01(\x03R\aendTime\x12:\n" +
	"\x06status\x18\x05 \x01(\x0e2\".slg.combat.v1_1_0.PvpSeasonStatusR\x06status\x12C\n" +
	"\x0eseason_rewards\x18\x06 \x03(\v2\x1c.slg.combat.v1_1_0.PvpRewardR\rseasonRewards\x12T\n" +
	"\frating_tiers\x18\a \x03(\v21.slg.combat.v1_1_0.PvpSeasonInfo.RatingTiersEntryR\vratingTiers\x1a>\n" +
	"\x10RatingTiersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x89\x02\n" +
	"\tPvpPlayer\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x1f\n" +
	"\vplayer_name\x18\x02 \x01(\tR\n" +
	"playerName\x12\x16\n" +
	"\x06rating\x18\x03 \x01(\x05R\x06rating\x12.\n" +
	"\x04tier\x18\x04 \x01(\x0e2\x1a.slg.combat.v1_1_0.PvpTierR\x04tier\x12\x1b\n" +
	"\twin_count\x18\x05 \x01(\x05R\bwinCount\x12\x1d\n" +
	"\n" +
	"lose_count\x18\x06 \x01(\x05R\tloseCount\x12\x1b\n" +
	"\tavatar_id\x18\a \x01(\tR\bavatarId\x12\x1d\n" +
	"\n" +
	"guild_name\x18\b \x01(\tR\tguildName\"\xdb\x02\n" +
	"\x0fPvpPlayerResult\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x1b\n" +
	"\tis_winner\x18\x02 \x01(\bR\bisWinner\x12#\n" +
	"\rrating_change\x18\x03 \x01(\x05R\fratingChange\x125\n" +
	"\bold_tier\x18\x04 \x01(\x0e2\x1a.slg.combat.v1_1_0.PvpTierR\aoldTier\x125\n" +
	"\bnew_tier\x18\x05 \x01(\x0e2\x1a.slg.combat.v1_1_0.PvpTierR\anewTier\x124\n" +
	"\x06reward\x18\x06 \x01(\v2\x1c.slg.combat.v1_1_0.PvpRewardR\x06reward\x12E\n" +
	"\fachievements\x18\a \x03(\v2!.slg.combat.v1_1_0.PvpAchievementR\fachievements\"\x88\x01\n" +
	"\fPvpRankEntry\x12\x12\n" +
	"\x04rank\x18\x01 \x01(\x05R\x04rank\x124\n" +
	"\x06player\x18\x02 \x01(\v2\x1c.slg.combat.v1_1_0.PvpPlayerR\x06player\x12\x16\n" +
	"\x06points\x18\x03 \x01(\x05R\x06points\x12\x16\n" +
	"\x06streak\x18\x04 \x01(\x05R\x06streak\"\xb8\x01\n" +
	"\rPvpPlayerRank\x12!\n" +
	"\fcurrent_rank\x18\x01 \x01(\x05R\vcurrentRank\x12\x1b\n" +
	"\tbest_rank\x18\x02 \x01(\x05R\bbestRank\x12\x16\n" +
	"\x06rating\x18\x03 \x01(\x05R\x06rating\x12\x1f\n" +
	"\vbest_rating\x18\x04 \x01(\x05R\n" +
	"bestRating\x12.\n" +
	"\x04tier\x18\x05 \x01(\x0e2\x1a.slg.combat.v1_1_0.PvpTierR\x04tier\"\xb5\x01\n" +
	"\tPvpReward\x12!\n" +
	"\fhonor_points\x18\x01 \x01(\x05R\vhonorPoints\x12\x1b\n" +
	"\tpvp_coins\x18\x02 \x01(\x05R\bpvpCoins\x12-\n" +
	"\x05items\x18\x03 \x03(\v2\x17.slg.common.v1_1_0.ItemR\x05items\x12\x19\n" +
	"\btitle_id\x18\x04 \x01(\tR\atitleId\x12\x1e\n" +
	"\n" +
	"experience\x18\x05 \x01(\x05R\n" +
	"experience\"\xb9\x01\n" +
	"\x0ePvpAchievement\x12%\n" +
	"\x0eachievement_id\x18\x01 \x01(\tR\rachievementId\x12)\n" +
	"\x10achievement_name\x18\x02 \x01(\tR\x0fachievementName\x12\x1f\n" +
	"\vunlock_time\x18\x03 \x01(\x03R\n" +
	"unlockTime\x124\n" +
	"\x06reward\x18\x04 \x01(\v2\x1c.slg.combat.v1_1_0.PvpRewardR\x06reward*\xb4\x01\n" +
	"\aPvpMode\x12\x14\n" +
	"\x10PVP_MODE_UNKNOWN\x10\x00\x12\x17\n" +
	"\x13PVP_MODE_RANKED_1V1\x10\x01\x12\x17\n" +
	"\x13PVP_MODE_RANKED_3V3\x10\x02\x12\x17\n" +
	"\x13PVP_MODE_CASUAL_1V1\x10\x03\x12\x17\n" +
	"\x13PVP_MODE_CASUAL_3V3\x10\x04\x12\x17\n" +
	"\x13PVP_MODE_TOURNAMENT\x10\x05\x12\x16\n" +
	"\x12PVP_MODE_GUILD_WAR\x10\x06*\xa6\x01\n" +
	"\x0ePvpMatchResult\x12\x1c\n" +
	"\x18PVP_MATCH_RESULT_UNKNOWN\x10\x00\x12\x1c\n" +
	"\x18PVP_MATCH_RESULT_SUCCESS\x10\x01\x12\x1c\n" +
	"\x18PVP_MATCH_RESULT_TIMEOUT\x10\x02\x12\x1e\n" +
	"\x1aPVP_MATCH_RESULT_CANCELLED\x10\x03\x12\x1a\n" +
	"\x16PVP_MATCH_RESULT_ERROR\x10\x04*\xb9\x01\n" +
	"\fPvpEndReason\x12\x1a\n" +
	"\x16PVP_END_REASON_UNKNOWN\x10\x00\x12\x1a\n" +
	"\x16PVP_END_REASON_VICTORY\x10\x01\x12\x1c\n" +
	"\x18PVP_END_REASON_SURRENDER\x10\x02\x12\x1a\n" +
	"\x16PVP_END_REASON_TIMEOUT\x10\x03\x12\x1d\n" +
	"\x19PVP_END_REASON_DISCONNECT\x10\x04\x12\x18\n" +
	"\x14PVP_END_REASON_CHEAT\x10\x05*\xb8\x01\n" +
	"\aPvpTier\x12\x14\n" +
	"\x10PVP_TIER_UNKNOWN\x10\x00\x12\x13\n" +
	"\x0fPVP_TIER_BRONZE\x10\x01\x12\x13\n" +
	"\x0fPVP_TIER_SILVER\x10\x02\x12\x11\n" +
	"\rPVP_TIER_GOLD\x10\x03\x12\x15\n" +
	"\x11PVP_TIER_PLATINUM\x10\x04\x12\x14\n" +
	"\x10PVP_TIER_DIAMOND\x10\x05\x12\x13\n" +
	"\x0fPVP_TIER_MASTER\x10\x06\x12\x18\n" +
	"\x14PVP_TIER_GRANDMASTER\x10\a*\xbb\x01\n" +
	"\x12PvpLeaderboardType\x12 \n" +
	"\x1cPVP_LEADERBOARD_TYPE_UNKNOWN\x10\x00\x12\x1f\n" +
	"\x1bPVP_LEADERBOARD_TYPE_RATING\x10\x01\x12!\n" +
	"\x1dPVP_LEADERBOARD_TYPE_WIN_RATE\x10\x02\x12\x1f\n" +
	"\x1bPVP_LEADERBOARD_TYPE_STREAK\x10\x03\x12\x1e\n" +
	"\x1aPVP_LEADERBOARD_TYPE_GUILD\x10\x04*\xa9\x01\n" +
	"\x0fPvpSeasonStatus\x12\x1d\n" +
	"\x19PVP_SEASON_STATUS_UNKNOWN\x10\x00\x12\x1e\n" +
	"\x1aPVP_SEASON_STATUS_UPCOMING\x10\x01\x12\x1c\n" +
	"\x18PVP_SEASON_STATUS_ACTIVE\x10\x02\x12\x1c\n" +
	"\x18PVP_SEASON_STATUS_ENDING\x10\x03\x12\x1b\n" +
	"\x17PVP_SEASON_STATUS_ENDED\x10\x04B\xb6\x01\n" +
	"\x15com.slg.combat.v1_1_0B\bPvpProtoP\x01Z5GoSlgBenchmarkTest/generated/slg/v1_1_0/combat;combat\xa2\x02\x03SCV\xaa\x02\x0fSlg.Combat.V110\xca\x02\x0fSlg\\Combat\\V110\xe2\x02\x1bSlg\\Combat\\V110\\GPBMetadata\xea\x02\x11Slg::Combat::V110b\x06proto3"

var (
	file_v1_1_0_combat_pvp_proto_rawDescOnce sync.Once
	file_v1_1_0_combat_pvp_proto_rawDescData []byte
)

func file_v1_1_0_combat_pvp_proto_rawDescGZIP() []byte {
	file_v1_1_0_combat_pvp_proto_rawDescOnce.Do(func() {
		file_v1_1_0_combat_pvp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_1_0_combat_pvp_proto_rawDesc), len(file_v1_1_0_combat_pvp_proto_rawDesc)))
	})
	return file_v1_1_0_combat_pvp_proto_rawDescData
}

var file_v1_1_0_combat_pvp_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_v1_1_0_combat_pvp_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_v1_1_0_combat_pvp_proto_goTypes = []any{
	(PvpMode)(0),                   // 0: slg.combat.v1_1_0.PvpMode
	(PvpMatchResult)(0),            // 1: slg.combat.v1_1_0.PvpMatchResult
	(PvpEndReason)(0),              // 2: slg.combat.v1_1_0.PvpEndReason
	(PvpTier)(0),                   // 3: slg.combat.v1_1_0.PvpTier
	(PvpLeaderboardType)(0),        // 4: slg.combat.v1_1_0.PvpLeaderboardType
	(PvpSeasonStatus)(0),           // 5: slg.combat.v1_1_0.PvpSeasonStatus
	(*PvpMatchRequest)(nil),        // 6: slg.combat.v1_1_0.PvpMatchRequest
	(*PvpMatchResponse)(nil),       // 7: slg.combat.v1_1_0.PvpMatchResponse
	(*PvpBattleResult)(nil),        // 8: slg.combat.v1_1_0.PvpBattleResult
	(*PvpLeaderboardRequest)(nil),  // 9: slg.combat.v1_1_0.PvpLeaderboardRequest
	(*PvpLeaderboardResponse)(nil), // 10: slg.combat.v1_1_0.PvpLeaderboardResponse
	(*PvpSeasonInfo)(nil),          // 11: slg.combat.v1_1_0.PvpSeasonInfo
	(*PvpPlayer)(nil),              // 12: slg.combat.v1_1_0.PvpPlayer
	(*PvpPlayerResult)(nil),        // 13: slg.combat.v1_1_0.PvpPlayerResult
	(*PvpRankEntry)(nil),           // 14: slg.combat.v1_1_0.PvpRankEntry
	(*PvpPlayerRank)(nil),          // 15: slg.combat.v1_1_0.PvpPlayerRank
	(*PvpReward)(nil),              // 16: slg.combat.v1_1_0.PvpReward
	(*PvpAchievement)(nil),         // 17: slg.combat.v1_1_0.PvpAchievement
	nil,                            // 18: slg.combat.v1_1_0.PvpSeasonInfo.RatingTiersEntry
	(*common.Item)(nil),            // 19: slg.common.v1_1_0.Item
}
var file_v1_1_0_combat_pvp_proto_depIdxs = []int32{
	0,  // 0: slg.combat.v1_1_0.PvpMatchRequest.mode:type_name -> slg.combat.v1_1_0.PvpMode
	1,  // 1: slg.combat.v1_1_0.PvpMatchResponse.result:type_name -> slg.combat.v1_1_0.PvpMatchResult
	12, // 2: slg.combat.v1_1_0.PvpMatchResponse.players:type_name -> slg.combat.v1_1_0.PvpPlayer
	13, // 3: slg.combat.v1_1_0.PvpBattleResult.player_results:type_name -> slg.combat.v1_1_0.PvpPlayerResult
	2,  // 4: slg.combat.v1_1_0.PvpBattleResult.end_reason:type_name -> slg.combat.v1_1_0.PvpEndReason
	4,  // 5: slg.combat.v1_1_0.PvpLeaderboardRequest.type:type_name -> slg.combat.v1_1_0.PvpLeaderboardType
	14, // 6: slg.combat.v1_1_0.PvpLeaderboardResponse.entries:type_name -> slg.combat.v1_1_0.PvpRankEntry
	15, // 7: slg.combat.v1_1_0.PvpLeaderboardResponse.player_rank:type_name -> slg.combat.v1_1_0.PvpPlayerRank
	5,  // 8: slg.combat.v1_1_0.PvpSeasonInfo.status:type_name -> slg.combat.v1_1_0.PvpSeasonStatus
	16, // 9: slg.combat.v1_1_0.PvpSeasonInfo.season_rewards:type_name -> slg.combat.v1_1_0.PvpReward
	18, // 10: slg.combat.v1_1_0.PvpSeasonInfo.rating_tiers:type_name -> slg.combat.v1_1_0.PvpSeasonInfo.RatingTiersEntry
	3,  // 11: slg.combat.v1_1_0.PvpPlayer.tier:type_name -> slg.combat.v1_1_0.PvpTier
	3,  // 12: slg.combat.v1_1_0.PvpPlayerResult.old_tier:type_name -> slg.combat.v1_1_0.PvpTier
	3,  // 13: slg.combat.v1_1_0.PvpPlayerResult.new_tier:type_name -> slg.combat.v1_1_0.PvpTier
	16, // 14: slg.combat.v1_1_0.PvpPlayerResult.reward:type_name -> slg.combat.v1_1_0.PvpReward
	17, // 15: slg.combat.v1_1_0.PvpPlayerResult.achievements:type_name -> slg.combat.v1_1_0.PvpAchievement
	12, // 16: slg.combat.v1_1_0.PvpRankEntry.player:type_name -> slg.combat.v1_1_0.PvpPlayer
	3,  // 17: slg.combat.v1_1_0.PvpPlayerRank.tier:type_name -> slg.combat.v1_1_0.PvpTier
	19, // 18: slg.combat.v1_1_0.PvpReward.items:type_name -> slg.common.v1_1_0.Item
	16, // 19: slg.combat.v1_1_0.PvpAchievement.reward:type_name -> slg.combat.v1_1_0.PvpReward
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_v1_1_0_combat_pvp_proto_init() }
func file_v1_1_0_combat_pvp_proto_init() {
	if File_v1_1_0_combat_pvp_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_1_0_combat_pvp_proto_rawDesc), len(file_v1_1_0_combat_pvp_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_1_0_combat_pvp_proto_goTypes,
		DependencyIndexes: file_v1_1_0_combat_pvp_proto_depIdxs,
		EnumInfos:         file_v1_1_0_combat_pvp_proto_enumTypes,
		MessageInfos:      file_v1_1_0_combat_pvp_proto_msgTypes,
	}.Build()
	File_v1_1_0_combat_pvp_proto = out.File
	file_v1_1_0_combat_pvp_proto_goTypes = nil
	file_v1_1_0_combat_pvp_proto_depIdxs = nil
}
