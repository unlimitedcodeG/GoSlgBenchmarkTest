// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: test_sessions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTestSession = `-- name: CreateTestSession :one
INSERT INTO test_sessions (
    test_id, session_id, client_type, client_info, start_time
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, test_id, session_id, client_type, client_info, connection_count, message_count, bytes_transfer, avg_latency, min_latency, max_latency, error_count, reconnect_count, start_time, end_time, created_at, updated_at
`

type CreateTestSessionParams struct {
	TestID     int64              `json:"test_id"`
	SessionID  string             `json:"session_id"`
	ClientType pgtype.Text        `json:"client_type"`
	ClientInfo []byte             `json:"client_info"`
	StartTime  pgtype.Timestamptz `json:"start_time"`
}

func (q *Queries) CreateTestSession(ctx context.Context, arg CreateTestSessionParams) (TestSession, error) {
	row := q.db.QueryRow(ctx, createTestSession,
		arg.TestID,
		arg.SessionID,
		arg.ClientType,
		arg.ClientInfo,
		arg.StartTime,
	)
	var i TestSession
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.SessionID,
		&i.ClientType,
		&i.ClientInfo,
		&i.ConnectionCount,
		&i.MessageCount,
		&i.BytesTransfer,
		&i.AvgLatency,
		&i.MinLatency,
		&i.MaxLatency,
		&i.ErrorCount,
		&i.ReconnectCount,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTestSession = `-- name: GetTestSession :one
SELECT id, test_id, session_id, client_type, client_info, connection_count, message_count, bytes_transfer, avg_latency, min_latency, max_latency, error_count, reconnect_count, start_time, end_time, created_at, updated_at FROM test_sessions WHERE session_id = $1
`

func (q *Queries) GetTestSession(ctx context.Context, sessionID string) (TestSession, error) {
	row := q.db.QueryRow(ctx, getTestSession, sessionID)
	var i TestSession
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.SessionID,
		&i.ClientType,
		&i.ClientInfo,
		&i.ConnectionCount,
		&i.MessageCount,
		&i.BytesTransfer,
		&i.AvgLatency,
		&i.MinLatency,
		&i.MaxLatency,
		&i.ErrorCount,
		&i.ReconnectCount,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTestSessions = `-- name: GetTestSessions :many
SELECT id, test_id, session_id, client_type, client_info, connection_count, message_count, bytes_transfer, avg_latency, min_latency, max_latency, error_count, reconnect_count, start_time, end_time, created_at, updated_at FROM test_sessions WHERE test_id = $1 ORDER BY start_time DESC
`

func (q *Queries) GetTestSessions(ctx context.Context, testID int64) ([]TestSession, error) {
	rows, err := q.db.Query(ctx, getTestSessions, testID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TestSession{}
	for rows.Next() {
		var i TestSession
		if err := rows.Scan(
			&i.ID,
			&i.TestID,
			&i.SessionID,
			&i.ClientType,
			&i.ClientInfo,
			&i.ConnectionCount,
			&i.MessageCount,
			&i.BytesTransfer,
			&i.AvgLatency,
			&i.MinLatency,
			&i.MaxLatency,
			&i.ErrorCount,
			&i.ReconnectCount,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTestSession = `-- name: UpdateTestSession :one
UPDATE test_sessions 
SET end_time = $2, connection_count = $3, message_count = $4, 
    bytes_transfer = $5, avg_latency = $6, min_latency = $7, 
    max_latency = $8, error_count = $9, reconnect_count = $10,
    updated_at = NOW()
WHERE id = $1
RETURNING id, test_id, session_id, client_type, client_info, connection_count, message_count, bytes_transfer, avg_latency, min_latency, max_latency, error_count, reconnect_count, start_time, end_time, created_at, updated_at
`

type UpdateTestSessionParams struct {
	ID              int64              `json:"id"`
	EndTime         pgtype.Timestamptz `json:"end_time"`
	ConnectionCount pgtype.Int4        `json:"connection_count"`
	MessageCount    pgtype.Int4        `json:"message_count"`
	BytesTransfer   pgtype.Int8        `json:"bytes_transfer"`
	AvgLatency      pgtype.Int8        `json:"avg_latency"`
	MinLatency      pgtype.Int8        `json:"min_latency"`
	MaxLatency      pgtype.Int8        `json:"max_latency"`
	ErrorCount      pgtype.Int4        `json:"error_count"`
	ReconnectCount  pgtype.Int4        `json:"reconnect_count"`
}

func (q *Queries) UpdateTestSession(ctx context.Context, arg UpdateTestSessionParams) (TestSession, error) {
	row := q.db.QueryRow(ctx, updateTestSession,
		arg.ID,
		arg.EndTime,
		arg.ConnectionCount,
		arg.MessageCount,
		arg.BytesTransfer,
		arg.AvgLatency,
		arg.MinLatency,
		arg.MaxLatency,
		arg.ErrorCount,
		arg.ReconnectCount,
	)
	var i TestSession
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.SessionID,
		&i.ClientType,
		&i.ClientInfo,
		&i.ConnectionCount,
		&i.MessageCount,
		&i.BytesTransfer,
		&i.AvgLatency,
		&i.MinLatency,
		&i.MaxLatency,
		&i.ErrorCount,
		&i.ReconnectCount,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTestSessionStats = `-- name: UpdateTestSessionStats :exec
UPDATE test_sessions 
SET message_count = message_count + 1,
    bytes_transfer = bytes_transfer + $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateTestSessionStatsParams struct {
	ID            int64       `json:"id"`
	BytesTransfer pgtype.Int8 `json:"bytes_transfer"`
}

func (q *Queries) UpdateTestSessionStats(ctx context.Context, arg UpdateTestSessionStatsParams) error {
	_, err := q.db.Exec(ctx, updateTestSessionStats, arg.ID, arg.BytesTransfer)
	return err
}
