// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: test_metrics.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTestMetric = `-- name: CreateTestMetric :one
INSERT INTO test_metrics (
    test_id, metric_type, metric_name, metric_value, metric_unit, timestamp
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, test_id, metric_type, metric_name, metric_value, metric_unit, timestamp, created_at
`

type CreateTestMetricParams struct {
	TestID      int64              `json:"test_id"`
	MetricType  string             `json:"metric_type"`
	MetricName  string             `json:"metric_name"`
	MetricValue pgtype.Numeric     `json:"metric_value"`
	MetricUnit  pgtype.Text        `json:"metric_unit"`
	Timestamp   pgtype.Timestamptz `json:"timestamp"`
}

func (q *Queries) CreateTestMetric(ctx context.Context, arg CreateTestMetricParams) (TestMetric, error) {
	row := q.db.QueryRow(ctx, createTestMetric,
		arg.TestID,
		arg.MetricType,
		arg.MetricName,
		arg.MetricValue,
		arg.MetricUnit,
		arg.Timestamp,
	)
	var i TestMetric
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.MetricType,
		&i.MetricName,
		&i.MetricValue,
		&i.MetricUnit,
		&i.Timestamp,
		&i.CreatedAt,
	)
	return i, err
}

const getRecentMetrics = `-- name: GetRecentMetrics :many
SELECT id, test_id, metric_type, metric_name, metric_value, metric_unit, timestamp, created_at FROM test_metrics 
WHERE timestamp > $1
ORDER BY timestamp DESC
LIMIT $2
`

type GetRecentMetricsParams struct {
	Timestamp pgtype.Timestamptz `json:"timestamp"`
	Limit     int32              `json:"limit"`
}

func (q *Queries) GetRecentMetrics(ctx context.Context, arg GetRecentMetricsParams) ([]TestMetric, error) {
	rows, err := q.db.Query(ctx, getRecentMetrics, arg.Timestamp, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TestMetric{}
	for rows.Next() {
		var i TestMetric
		if err := rows.Scan(
			&i.ID,
			&i.TestID,
			&i.MetricType,
			&i.MetricName,
			&i.MetricValue,
			&i.MetricUnit,
			&i.Timestamp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTestMetrics = `-- name: GetTestMetrics :many
SELECT id, test_id, metric_type, metric_name, metric_value, metric_unit, timestamp, created_at FROM test_metrics 
WHERE test_id = $1 
ORDER BY timestamp DESC
`

func (q *Queries) GetTestMetrics(ctx context.Context, testID int64) ([]TestMetric, error) {
	rows, err := q.db.Query(ctx, getTestMetrics, testID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TestMetric{}
	for rows.Next() {
		var i TestMetric
		if err := rows.Scan(
			&i.ID,
			&i.TestID,
			&i.MetricType,
			&i.MetricName,
			&i.MetricValue,
			&i.MetricUnit,
			&i.Timestamp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTestMetricsByType = `-- name: GetTestMetricsByType :many
SELECT id, test_id, metric_type, metric_name, metric_value, metric_unit, timestamp, created_at FROM test_metrics 
WHERE test_id = $1 AND metric_type = $2
ORDER BY timestamp DESC
`

type GetTestMetricsByTypeParams struct {
	TestID     int64  `json:"test_id"`
	MetricType string `json:"metric_type"`
}

func (q *Queries) GetTestMetricsByType(ctx context.Context, arg GetTestMetricsByTypeParams) ([]TestMetric, error) {
	rows, err := q.db.Query(ctx, getTestMetricsByType, arg.TestID, arg.MetricType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TestMetric{}
	for rows.Next() {
		var i TestMetric
		if err := rows.Scan(
			&i.ID,
			&i.TestID,
			&i.MetricType,
			&i.MetricName,
			&i.MetricValue,
			&i.MetricUnit,
			&i.Timestamp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
