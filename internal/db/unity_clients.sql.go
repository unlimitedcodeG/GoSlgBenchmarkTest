// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: unity_clients.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUnityClient = `-- name: CreateUnityClient :one
INSERT INTO unity_client_records (
    test_id, player_id, unity_version, platform, device_info, connect_time
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, test_id, player_id, unity_version, platform, device_info, connect_time, disconnect_time, total_duration, action_count, avg_fps, memory_usage, created_at, updated_at
`

type CreateUnityClientParams struct {
	TestID       int64              `json:"test_id"`
	PlayerID     string             `json:"player_id"`
	UnityVersion pgtype.Text        `json:"unity_version"`
	Platform     pgtype.Text        `json:"platform"`
	DeviceInfo   []byte             `json:"device_info"`
	ConnectTime  pgtype.Timestamptz `json:"connect_time"`
}

func (q *Queries) CreateUnityClient(ctx context.Context, arg CreateUnityClientParams) (UnityClientRecord, error) {
	row := q.db.QueryRow(ctx, createUnityClient,
		arg.TestID,
		arg.PlayerID,
		arg.UnityVersion,
		arg.Platform,
		arg.DeviceInfo,
		arg.ConnectTime,
	)
	var i UnityClientRecord
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.PlayerID,
		&i.UnityVersion,
		&i.Platform,
		&i.DeviceInfo,
		&i.ConnectTime,
		&i.DisconnectTime,
		&i.TotalDuration,
		&i.ActionCount,
		&i.AvgFps,
		&i.MemoryUsage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUnityClient = `-- name: GetUnityClient :one
SELECT id, test_id, player_id, unity_version, platform, device_info, connect_time, disconnect_time, total_duration, action_count, avg_fps, memory_usage, created_at, updated_at FROM unity_client_records 
WHERE test_id = $1 AND player_id = $2 
ORDER BY created_at DESC LIMIT 1
`

type GetUnityClientParams struct {
	TestID   int64  `json:"test_id"`
	PlayerID string `json:"player_id"`
}

func (q *Queries) GetUnityClient(ctx context.Context, arg GetUnityClientParams) (UnityClientRecord, error) {
	row := q.db.QueryRow(ctx, getUnityClient, arg.TestID, arg.PlayerID)
	var i UnityClientRecord
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.PlayerID,
		&i.UnityVersion,
		&i.Platform,
		&i.DeviceInfo,
		&i.ConnectTime,
		&i.DisconnectTime,
		&i.TotalDuration,
		&i.ActionCount,
		&i.AvgFps,
		&i.MemoryUsage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUnityClientStats = `-- name: GetUnityClientStats :one
SELECT 
    COUNT(*) as total_clients,
    COUNT(CASE WHEN disconnect_time IS NOT NULL THEN 1 END) as disconnected_clients,
    AVG(total_duration) as avg_session_duration,
    AVG(action_count) as avg_actions,
    AVG(avg_fps) as avg_fps,
    AVG(memory_usage) as avg_memory
FROM unity_client_records WHERE test_id = $1
`

type GetUnityClientStatsRow struct {
	TotalClients        int64   `json:"total_clients"`
	DisconnectedClients int64   `json:"disconnected_clients"`
	AvgSessionDuration  float64 `json:"avg_session_duration"`
	AvgActions          float64 `json:"avg_actions"`
	AvgFps              float64 `json:"avg_fps"`
	AvgMemory           float64 `json:"avg_memory"`
}

func (q *Queries) GetUnityClientStats(ctx context.Context, testID int64) (GetUnityClientStatsRow, error) {
	row := q.db.QueryRow(ctx, getUnityClientStats, testID)
	var i GetUnityClientStatsRow
	err := row.Scan(
		&i.TotalClients,
		&i.DisconnectedClients,
		&i.AvgSessionDuration,
		&i.AvgActions,
		&i.AvgFps,
		&i.AvgMemory,
	)
	return i, err
}

const getUnityClients = `-- name: GetUnityClients :many
SELECT id, test_id, player_id, unity_version, platform, device_info, connect_time, disconnect_time, total_duration, action_count, avg_fps, memory_usage, created_at, updated_at FROM unity_client_records WHERE test_id = $1 ORDER BY connect_time DESC
`

func (q *Queries) GetUnityClients(ctx context.Context, testID int64) ([]UnityClientRecord, error) {
	rows, err := q.db.Query(ctx, getUnityClients, testID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UnityClientRecord{}
	for rows.Next() {
		var i UnityClientRecord
		if err := rows.Scan(
			&i.ID,
			&i.TestID,
			&i.PlayerID,
			&i.UnityVersion,
			&i.Platform,
			&i.DeviceInfo,
			&i.ConnectTime,
			&i.DisconnectTime,
			&i.TotalDuration,
			&i.ActionCount,
			&i.AvgFps,
			&i.MemoryUsage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementActionCount = `-- name: IncrementActionCount :exec
UPDATE unity_client_records 
SET action_count = action_count + 1, updated_at = NOW()
WHERE test_id = $1 AND player_id = $2
`

type IncrementActionCountParams struct {
	TestID   int64  `json:"test_id"`
	PlayerID string `json:"player_id"`
}

func (q *Queries) IncrementActionCount(ctx context.Context, arg IncrementActionCountParams) error {
	_, err := q.db.Exec(ctx, incrementActionCount, arg.TestID, arg.PlayerID)
	return err
}

const updateUnityClient = `-- name: UpdateUnityClient :one
UPDATE unity_client_records 
SET disconnect_time = $2, total_duration = $3, action_count = $4,
    avg_fps = $5, memory_usage = $6, updated_at = NOW()
WHERE id = $1
RETURNING id, test_id, player_id, unity_version, platform, device_info, connect_time, disconnect_time, total_duration, action_count, avg_fps, memory_usage, created_at, updated_at
`

type UpdateUnityClientParams struct {
	ID             int64              `json:"id"`
	DisconnectTime pgtype.Timestamptz `json:"disconnect_time"`
	TotalDuration  pgtype.Int8        `json:"total_duration"`
	ActionCount    pgtype.Int4        `json:"action_count"`
	AvgFps         pgtype.Numeric     `json:"avg_fps"`
	MemoryUsage    pgtype.Numeric     `json:"memory_usage"`
}

func (q *Queries) UpdateUnityClient(ctx context.Context, arg UpdateUnityClientParams) (UnityClientRecord, error) {
	row := q.db.QueryRow(ctx, updateUnityClient,
		arg.ID,
		arg.DisconnectTime,
		arg.TotalDuration,
		arg.ActionCount,
		arg.AvgFps,
		arg.MemoryUsage,
	)
	var i UnityClientRecord
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.PlayerID,
		&i.UnityVersion,
		&i.Platform,
		&i.DeviceInfo,
		&i.ConnectTime,
		&i.DisconnectTime,
		&i.TotalDuration,
		&i.ActionCount,
		&i.AvgFps,
		&i.MemoryUsage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
