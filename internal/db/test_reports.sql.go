// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: test_reports.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTestReport = `-- name: CreateTestReport :one
INSERT INTO test_reports (
    test_id, summary, issues, suggestions, raw_data
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, test_id, summary, issues, suggestions, raw_data, created_at, updated_at
`

type CreateTestReportParams struct {
	TestID      int64       `json:"test_id"`
	Summary     pgtype.Text `json:"summary"`
	Issues      []byte      `json:"issues"`
	Suggestions []byte      `json:"suggestions"`
	RawData     pgtype.Text `json:"raw_data"`
}

func (q *Queries) CreateTestReport(ctx context.Context, arg CreateTestReportParams) (TestReport, error) {
	row := q.db.QueryRow(ctx, createTestReport,
		arg.TestID,
		arg.Summary,
		arg.Issues,
		arg.Suggestions,
		arg.RawData,
	)
	var i TestReport
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.Summary,
		&i.Issues,
		&i.Suggestions,
		&i.RawData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTestReport = `-- name: GetTestReport :one
SELECT id, test_id, summary, issues, suggestions, raw_data, created_at, updated_at FROM test_reports WHERE id = $1
`

func (q *Queries) GetTestReport(ctx context.Context, id int64) (TestReport, error) {
	row := q.db.QueryRow(ctx, getTestReport, id)
	var i TestReport
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.Summary,
		&i.Issues,
		&i.Suggestions,
		&i.RawData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTestReports = `-- name: GetTestReports :many
SELECT id, test_id, summary, issues, suggestions, raw_data, created_at, updated_at FROM test_reports WHERE test_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetTestReports(ctx context.Context, testID int64) ([]TestReport, error) {
	rows, err := q.db.Query(ctx, getTestReports, testID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TestReport{}
	for rows.Next() {
		var i TestReport
		if err := rows.Scan(
			&i.ID,
			&i.TestID,
			&i.Summary,
			&i.Issues,
			&i.Suggestions,
			&i.RawData,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
