// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session_events.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSessionEvent = `-- name: CreateSessionEvent :one
INSERT INTO session_events (
    session_id, event_type, event_data, timestamp
) VALUES (
    $1, $2, $3, $4
) RETURNING id, session_id, event_type, event_data, timestamp, created_at
`

type CreateSessionEventParams struct {
	SessionID int64              `json:"session_id"`
	EventType string             `json:"event_type"`
	EventData []byte             `json:"event_data"`
	Timestamp pgtype.Timestamptz `json:"timestamp"`
}

func (q *Queries) CreateSessionEvent(ctx context.Context, arg CreateSessionEventParams) (SessionEvent, error) {
	row := q.db.QueryRow(ctx, createSessionEvent,
		arg.SessionID,
		arg.EventType,
		arg.EventData,
		arg.Timestamp,
	)
	var i SessionEvent
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.EventType,
		&i.EventData,
		&i.Timestamp,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionEvents = `-- name: GetSessionEvents :many
SELECT id, session_id, event_type, event_data, timestamp, created_at FROM session_events 
WHERE session_id = $1 
ORDER BY timestamp DESC
`

func (q *Queries) GetSessionEvents(ctx context.Context, sessionID int64) ([]SessionEvent, error) {
	rows, err := q.db.Query(ctx, getSessionEvents, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SessionEvent{}
	for rows.Next() {
		var i SessionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.EventType,
			&i.EventData,
			&i.Timestamp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionEventsByType = `-- name: GetSessionEventsByType :many
SELECT id, session_id, event_type, event_data, timestamp, created_at FROM session_events 
WHERE session_id = $1 AND event_type = $2
ORDER BY timestamp DESC
`

type GetSessionEventsByTypeParams struct {
	SessionID int64  `json:"session_id"`
	EventType string `json:"event_type"`
}

func (q *Queries) GetSessionEventsByType(ctx context.Context, arg GetSessionEventsByTypeParams) ([]SessionEvent, error) {
	rows, err := q.db.Query(ctx, getSessionEventsByType, arg.SessionID, arg.EventType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SessionEvent{}
	for rows.Next() {
		var i SessionEvent
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.EventType,
			&i.EventData,
			&i.Timestamp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
