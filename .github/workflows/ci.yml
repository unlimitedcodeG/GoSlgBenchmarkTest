name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  GO_VERSION: '1.22'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # buf 自带 toolchain，避免“protoc not found”
      - uses: bufbuild/buf-setup-action@v1

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - run: go mod download

      # 用 buf 生成（需 repo 根有 buf.yaml / buf.gen.yaml）
      - run: buf generate

      - run: go test ./... -v -race -count=1

      - run: |
          go test ./... -v -race -coverprofile=coverage.out -covermode=atomic
          go tool cover -func=coverage.out | tail -1

      - uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: bufbuild/buf-setup-action@v1
      - run: go mod download
      - run: buf generate
      - run: |
          go test ./test -run=^$ -bench=. -benchmem -count=3 | tee benchmark_results.txt
      - uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark_results.txt

  fuzz:
    name: Fuzz Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: bufbuild/buf-setup-action@v1
      - run: go mod download
      - run: buf generate
      - run: |
          go test ./test -run=^$ -fuzz=FuzzBattlePushUnmarshal -fuzztime=30s
          go test ./test -run=^$ -fuzz=FuzzFrameDecode -fuzztime=30s
          go test ./test -run=^$ -fuzz=FuzzPlayerActionUnmarshal -fuzztime=30s

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: bufbuild/buf-setup-action@v1
      - run: go mod download
      - run: buf generate
      - run: go build -v ./...
      - run: go test -c ./test
