name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  GO_VERSION: '1.25'
  GO111MODULE: on

jobs:
  # 代码检查和测试
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # buf 自带 toolchain，避免"protoc not found"
      - uses: bufbuild/buf-setup-action@v1

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - run: go mod download

      # 下载并整理依赖
      - name: Download and tidy dependencies
        run: |
          go mod download
          go mod tidy

      # 清理旧的生成文件
      - name: Clean generated files
        run: |
          rm -rf generated/slg/v1_0_0/GoSlgBenchmarkTest
          rm -rf generated/slg/v1_1_0/GoSlgBenchmarkTest
          rm -rf GoSlgBenchmarkTest/generated

      # 用 buf 生成（需 repo 根有 buf.yaml / buf.gen.yaml）
      - run: buf generate

      # 验证生成的代码并移动到正确位置
      - name: Fix generated code location
        run: |
          if [ -d "GoSlgBenchmarkTest/generated" ]; then
            mkdir -p generated
            cp -r GoSlgBenchmarkTest/generated/* generated/
            rm -rf GoSlgBenchmarkTest
          fi
          if [ -d "generated/slg/v1_0_0/GoSlgBenchmarkTest" ]; then
            echo "Error: Duplicate package paths detected"
            exit 1
          fi

      # 基础代码检查
      - name: Basic code checks
        env:
          GO111MODULE: on
          GOFLAGS: -mod=mod
        run: |
          go fmt ./...
          go vet ./...
          go mod verify

      - run: go test ./... -v -race -count=1 -timeout=10m
        env:
          GO111MODULE: on
          GOFLAGS: -mod=mod

      # 快速单元测试（排除长时间的WebSocket集成测试）
      - name: Run unit tests (exclude long-running WebSocket tests)
        run: |
          go test ./... -v -race -short -count=1 -timeout=6m
        env:
          GO111MODULE: on
          GOFLAGS: -mod=mod

      # 生成覆盖率报告（排除长时间测试）
      - name: Generate coverage report (exclude long tests)
        run: |
          go test ./... -v -race -short -coverprofile=coverage.out -covermode=atomic -timeout=6m
          go tool cover -func=coverage.out | tail -1
        env:
          GO111MODULE: on
          GOFLAGS: -mod=mod

      - uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  # WebSocket 集成测试（独立工作流，处理长时间运行测试）
  websocket_integration:
    name: WebSocket Integration Tests
    runs-on: ubuntu-latest
    needs: test  # 依赖基础测试通过
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'websocket-test'))
    timeout-minutes: 15  # 设置15分钟超时，包括服务器启动和测试时间
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # buf 自带 toolchain
      - uses: bufbuild/buf-setup-action@v1

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - run: go mod download

      # 生成protobuf代码
      - run: buf generate

      # 修复生成代码位置
      - name: Fix generated code location
        run: |
          if [ -d "GoSlgBenchmarkTest/generated" ]; then
            mkdir -p generated
            cp -r GoSlgBenchmarkTest/generated/* generated/
            rm -rf GoSlgBenchmarkTest
          fi

      # 启动WebSocket测试服务器（后台运行）
      - name: Start WebSocket Test Server
        env:
          CI: true
          WS_PORT: 18090
        run: |
          # 启动WebSocket服务器
          SERVER_TYPE=websocket go run tools/grpc-server.go &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV

          # 等待服务器启动（更长的等待时间）
          echo "⏳ 等待WebSocket服务器启动..."
          timeout 60 bash -c 'until nc -z localhost 18090; do sleep 2; echo "等待服务器启动..."; done' || {
            echo "❌ WebSocket server failed to start within 60 seconds"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          }
          echo "✅ WebSocket server started successfully on port 18090"

      # 运行WebSocket集成测试（带超时保护）
      - name: Run WebSocket Integration Tests
        env:
          GO_TEST_TIMEOUT: 7m
        run: |
          echo "🚀 Starting WebSocket integration tests..."
          echo "⏱️  Test will run for approximately 5 minutes..."

          # 运行5分钟的长时间测试，设置7分钟超时时间（包含重连延迟）
          go test ./test/session -v -run TestTimelineAnalysisRealWallClock \
            -timeout=${GO_TEST_TIMEOUT} \
            -parallel=1 \
            -count=1 || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 1 ]; then
              echo "❌ Test failed with assertion errors"
            elif [ $EXIT_CODE -eq 124 ]; then
              echo "❌ Test timed out after ${GO_TEST_TIMEOUT} (expected: 5m + buffer)"
            else
              echo "❌ Test failed with exit code $EXIT_CODE"
            fi
            exit $EXIT_CODE
          }

      # 运行其他WebSocket相关测试
      - name: Run Other WebSocket Tests
        run: |
          go test ./test/session -v -run "TestSessionRecordingAndReplay|TestSessionAssertions" -timeout=2m

      # 清理后台进程
      - name: Cleanup
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            echo "Stopping WebSocket server (PID: $SERVER_PID)"
            kill $SERVER_PID 2>/dev/null || true
          fi

      # 上传WebSocket测试报告
      - name: Upload WebSocket Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: websocket-test-results-${{ github.run_id }}
          path: |
            *.log
            test-results/
          retention-days: 7

  # 基准测试
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: bufbuild/buf-setup-action@v1
      - run: go mod download
      - run: |
          go mod download
          go mod tidy
      - run: buf generate
      - name: Fix generated code location
        run: |
          if [ -d "GoSlgBenchmarkTest/generated" ]; then
            mkdir -p generated
            cp -r GoSlgBenchmarkTest/generated/* generated/
            rm -rf GoSlgBenchmarkTest
          fi
      - run: |
          go test ./test -run=^$ -bench=. -benchmem -count=3 -timeout=10m | tee benchmark_results.txt
        env:
          GO111MODULE: on
          GOFLAGS: -mod=mod
      - uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark_results.txt

  # 模糊测试
  fuzz:
    name: Fuzz Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: bufbuild/buf-setup-action@v1
      - run: go mod download
      - run: |
          go mod download
          go mod tidy
      - run: buf generate
      - name: Fix generated code location
        run: |
          if [ -d "GoSlgBenchmarkTest/generated" ]; then
            mkdir -p generated
            cp -r GoSlgBenchmarkTest/generated/* generated/
            rm -rf GoSlgBenchmarkTest
          fi
      - name: Run fuzz tests
        run: |
          # 运行每个模糊测试30秒，使用精确匹配避免命名冲突
          go test ./test -run=^$ -fuzz=^FuzzBattlePushUnmarshal$ -fuzztime=30s -timeout=5m
          go test ./test -run=^$ -fuzz=^FuzzLoginReqUnmarshal$ -fuzztime=30s -timeout=5m
          go test ./test -run=^$ -fuzz=^FuzzPlayerActionUnmarshal$ -fuzztime=30s -timeout=5m
          go test ./test -run=^$ -fuzz=^FuzzFrameDecode$ -fuzztime=30s -timeout=5m
          go test ./test -run=^$ -fuzz=^FuzzFrameDecoder$ -fuzztime=30s -timeout=5m
          go test ./test -run=^$ -fuzz=^FuzzErrorResp$ -fuzztime=30s -timeout=5m
        env:
          GO111MODULE: on
          GOFLAGS: -mod=mod

  # Go 版本兼容性测试（精简版）
  go-versions:
    name: Go Versions
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        go-version: ['1.22', '1.25']  # 只测试最低支持版本和当前版本
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - uses: bufbuild/buf-setup-action@v1
      - run: go mod download
      - run: |
          go mod download
          go mod tidy
      - run: buf generate
      - name: Fix generated code location
        run: |
          if [ -d "GoSlgBenchmarkTest/generated" ]; then
            mkdir -p generated
            cp -r GoSlgBenchmarkTest/generated/* generated/
            rm -rf GoSlgBenchmarkTest
          fi
      - run: go test ./... -v -count=1 -timeout=10m
        env:
          GO111MODULE: on
          GOFLAGS: -mod=mod
