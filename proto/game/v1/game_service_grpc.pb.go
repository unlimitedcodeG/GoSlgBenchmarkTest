// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/game/v1/game_service.proto

package gamev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameService_Login_FullMethodName                = "/game.v1.GameService/Login"
	GameService_Logout_FullMethodName               = "/game.v1.GameService/Logout"
	GameService_RefreshToken_FullMethodName         = "/game.v1.GameService/RefreshToken"
	GameService_SendPlayerAction_FullMethodName     = "/game.v1.GameService/SendPlayerAction"
	GameService_GetPlayerStatus_FullMethodName      = "/game.v1.GameService/GetPlayerStatus"
	GameService_UpdatePlayerProfile_FullMethodName  = "/game.v1.GameService/UpdatePlayerProfile"
	GameService_GetBattleStatus_FullMethodName      = "/game.v1.GameService/GetBattleStatus"
	GameService_JoinBattle_FullMethodName           = "/game.v1.GameService/JoinBattle"
	GameService_LeaveBattle_FullMethodName          = "/game.v1.GameService/LeaveBattle"
	GameService_StreamBattleUpdates_FullMethodName  = "/game.v1.GameService/StreamBattleUpdates"
	GameService_StreamPlayerEvents_FullMethodName   = "/game.v1.GameService/StreamPlayerEvents"
	GameService_BatchPlayerActions_FullMethodName   = "/game.v1.GameService/BatchPlayerActions"
	GameService_GetBatchBattleStatus_FullMethodName = "/game.v1.GameService/GetBatchBattleStatus"
)

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 游戏服务 - gRPC接口定义
type GameServiceClient interface {
	// 用户认证相关
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error)
	// 玩家操作相关
	SendPlayerAction(ctx context.Context, in *PlayerAction, opts ...grpc.CallOption) (*ActionResp, error)
	GetPlayerStatus(ctx context.Context, in *PlayerStatusReq, opts ...grpc.CallOption) (*PlayerStatusResp, error)
	UpdatePlayerProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*UpdateProfileResp, error)
	// 战斗相关
	GetBattleStatus(ctx context.Context, in *BattleStatusReq, opts ...grpc.CallOption) (*BattleStatusResp, error)
	JoinBattle(ctx context.Context, in *JoinBattleReq, opts ...grpc.CallOption) (*JoinBattleResp, error)
	LeaveBattle(ctx context.Context, in *LeaveBattleReq, opts ...grpc.CallOption) (*LeaveBattleResp, error)
	// 流式RPC - 实时战斗更新
	StreamBattleUpdates(ctx context.Context, in *BattleStreamReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BattlePush], error)
	StreamPlayerEvents(ctx context.Context, in *PlayerEventStreamReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PlayerEventPush], error)
	// 批量操作
	BatchPlayerActions(ctx context.Context, in *BatchActionReq, opts ...grpc.CallOption) (*BatchActionResp, error)
	GetBatchBattleStatus(ctx context.Context, in *BatchBattleStatusReq, opts ...grpc.CallOption) (*BatchBattleStatusResp, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, GameService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, GameService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResp)
	err := c.cc.Invoke(ctx, GameService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) SendPlayerAction(ctx context.Context, in *PlayerAction, opts ...grpc.CallOption) (*ActionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResp)
	err := c.cc.Invoke(ctx, GameService_SendPlayerAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetPlayerStatus(ctx context.Context, in *PlayerStatusReq, opts ...grpc.CallOption) (*PlayerStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerStatusResp)
	err := c.cc.Invoke(ctx, GameService_GetPlayerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) UpdatePlayerProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*UpdateProfileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileResp)
	err := c.cc.Invoke(ctx, GameService_UpdatePlayerProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetBattleStatus(ctx context.Context, in *BattleStatusReq, opts ...grpc.CallOption) (*BattleStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BattleStatusResp)
	err := c.cc.Invoke(ctx, GameService_GetBattleStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) JoinBattle(ctx context.Context, in *JoinBattleReq, opts ...grpc.CallOption) (*JoinBattleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinBattleResp)
	err := c.cc.Invoke(ctx, GameService_JoinBattle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) LeaveBattle(ctx context.Context, in *LeaveBattleReq, opts ...grpc.CallOption) (*LeaveBattleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveBattleResp)
	err := c.cc.Invoke(ctx, GameService_LeaveBattle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) StreamBattleUpdates(ctx context.Context, in *BattleStreamReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BattlePush], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[0], GameService_StreamBattleUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BattleStreamReq, BattlePush]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_StreamBattleUpdatesClient = grpc.ServerStreamingClient[BattlePush]

func (c *gameServiceClient) StreamPlayerEvents(ctx context.Context, in *PlayerEventStreamReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PlayerEventPush], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[1], GameService_StreamPlayerEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PlayerEventStreamReq, PlayerEventPush]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_StreamPlayerEventsClient = grpc.ServerStreamingClient[PlayerEventPush]

func (c *gameServiceClient) BatchPlayerActions(ctx context.Context, in *BatchActionReq, opts ...grpc.CallOption) (*BatchActionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchActionResp)
	err := c.cc.Invoke(ctx, GameService_BatchPlayerActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetBatchBattleStatus(ctx context.Context, in *BatchBattleStatusReq, opts ...grpc.CallOption) (*BatchBattleStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchBattleStatusResp)
	err := c.cc.Invoke(ctx, GameService_GetBatchBattleStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility.
//
// 游戏服务 - gRPC接口定义
type GameServiceServer interface {
	// 用户认证相关
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenResp, error)
	// 玩家操作相关
	SendPlayerAction(context.Context, *PlayerAction) (*ActionResp, error)
	GetPlayerStatus(context.Context, *PlayerStatusReq) (*PlayerStatusResp, error)
	UpdatePlayerProfile(context.Context, *UpdateProfileReq) (*UpdateProfileResp, error)
	// 战斗相关
	GetBattleStatus(context.Context, *BattleStatusReq) (*BattleStatusResp, error)
	JoinBattle(context.Context, *JoinBattleReq) (*JoinBattleResp, error)
	LeaveBattle(context.Context, *LeaveBattleReq) (*LeaveBattleResp, error)
	// 流式RPC - 实时战斗更新
	StreamBattleUpdates(*BattleStreamReq, grpc.ServerStreamingServer[BattlePush]) error
	StreamPlayerEvents(*PlayerEventStreamReq, grpc.ServerStreamingServer[PlayerEventPush]) error
	// 批量操作
	BatchPlayerActions(context.Context, *BatchActionReq) (*BatchActionResp, error)
	GetBatchBattleStatus(context.Context, *BatchBattleStatusReq) (*BatchBattleStatusResp, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameServiceServer struct{}

func (UnimplementedGameServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGameServiceServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedGameServiceServer) RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedGameServiceServer) SendPlayerAction(context.Context, *PlayerAction) (*ActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlayerAction not implemented")
}
func (UnimplementedGameServiceServer) GetPlayerStatus(context.Context, *PlayerStatusReq) (*PlayerStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStatus not implemented")
}
func (UnimplementedGameServiceServer) UpdatePlayerProfile(context.Context, *UpdateProfileReq) (*UpdateProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerProfile not implemented")
}
func (UnimplementedGameServiceServer) GetBattleStatus(context.Context, *BattleStatusReq) (*BattleStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBattleStatus not implemented")
}
func (UnimplementedGameServiceServer) JoinBattle(context.Context, *JoinBattleReq) (*JoinBattleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinBattle not implemented")
}
func (UnimplementedGameServiceServer) LeaveBattle(context.Context, *LeaveBattleReq) (*LeaveBattleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveBattle not implemented")
}
func (UnimplementedGameServiceServer) StreamBattleUpdates(*BattleStreamReq, grpc.ServerStreamingServer[BattlePush]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBattleUpdates not implemented")
}
func (UnimplementedGameServiceServer) StreamPlayerEvents(*PlayerEventStreamReq, grpc.ServerStreamingServer[PlayerEventPush]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPlayerEvents not implemented")
}
func (UnimplementedGameServiceServer) BatchPlayerActions(context.Context, *BatchActionReq) (*BatchActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchPlayerActions not implemented")
}
func (UnimplementedGameServiceServer) GetBatchBattleStatus(context.Context, *BatchBattleStatusReq) (*BatchBattleStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchBattleStatus not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}
func (UnimplementedGameServiceServer) testEmbeddedByValue()                     {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).RefreshToken(ctx, req.(*RefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_SendPlayerAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).SendPlayerAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_SendPlayerAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).SendPlayerAction(ctx, req.(*PlayerAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetPlayerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetPlayerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetPlayerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetPlayerStatus(ctx, req.(*PlayerStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_UpdatePlayerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).UpdatePlayerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_UpdatePlayerProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).UpdatePlayerProfile(ctx, req.(*UpdateProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetBattleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BattleStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetBattleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetBattleStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetBattleStatus(ctx, req.(*BattleStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_JoinBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinBattleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).JoinBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_JoinBattle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).JoinBattle(ctx, req.(*JoinBattleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_LeaveBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveBattleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).LeaveBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_LeaveBattle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).LeaveBattle(ctx, req.(*LeaveBattleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_StreamBattleUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BattleStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).StreamBattleUpdates(m, &grpc.GenericServerStream[BattleStreamReq, BattlePush]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_StreamBattleUpdatesServer = grpc.ServerStreamingServer[BattlePush]

func _GameService_StreamPlayerEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayerEventStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).StreamPlayerEvents(m, &grpc.GenericServerStream[PlayerEventStreamReq, PlayerEventPush]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_StreamPlayerEventsServer = grpc.ServerStreamingServer[PlayerEventPush]

func _GameService_BatchPlayerActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).BatchPlayerActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_BatchPlayerActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).BatchPlayerActions(ctx, req.(*BatchActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetBatchBattleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchBattleStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetBatchBattleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetBatchBattleStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetBatchBattleStatus(ctx, req.(*BatchBattleStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.v1.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _GameService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _GameService_Logout_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _GameService_RefreshToken_Handler,
		},
		{
			MethodName: "SendPlayerAction",
			Handler:    _GameService_SendPlayerAction_Handler,
		},
		{
			MethodName: "GetPlayerStatus",
			Handler:    _GameService_GetPlayerStatus_Handler,
		},
		{
			MethodName: "UpdatePlayerProfile",
			Handler:    _GameService_UpdatePlayerProfile_Handler,
		},
		{
			MethodName: "GetBattleStatus",
			Handler:    _GameService_GetBattleStatus_Handler,
		},
		{
			MethodName: "JoinBattle",
			Handler:    _GameService_JoinBattle_Handler,
		},
		{
			MethodName: "LeaveBattle",
			Handler:    _GameService_LeaveBattle_Handler,
		},
		{
			MethodName: "BatchPlayerActions",
			Handler:    _GameService_BatchPlayerActions_Handler,
		},
		{
			MethodName: "GetBatchBattleStatus",
			Handler:    _GameService_GetBatchBattleStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBattleUpdates",
			Handler:       _GameService_StreamBattleUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPlayerEvents",
			Handler:       _GameService_StreamPlayerEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/game/v1/game_service.proto",
}
